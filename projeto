{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Catiluka/Human-Activity-Recognition-Kmeans./blob/main/Untitled0.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true,
          "base_uri": "https://localhost:8080/",
          "height": 60
        },
        "id": "MgJnmsGU03uz",
        "outputId": "14406e98-aa95-4056-d7d6-731fc141bc96"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-558ccc1f-ed8d-4a51-a1b8-fa99a2102346\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-558ccc1f-ed8d-4a51-a1b8-fa99a2102346\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        }
      ],
      "source": [
        "from google.colab import files\n",
        "uploaded = files.upload()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bqI6Vn30-duc",
        "outputId": "3db7af95-634d-465d-8673-271bc4a7ff70"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "['.config', 'human+activity+recognition+using+smartphones (1).zip', 'sample_data']\n"
          ]
        }
      ],
      "source": [
        "import os\n",
        "print(os.listdir())"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "G-5wNWDiBwc-"
      },
      "outputs": [],
      "source": [
        "from google.colab import files"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "t69EU4r8Cb9t"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Kek2YZls82qx",
        "outputId": "1c5bd762-b57d-4f0e-b8af-29a1c806803a"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "['.config', 'human+activity+recognition+using+smartphones (1).zip', 'human+activity+recognition+using+smartphones (1) (1).zip', 'human+activity+recognition+using+smartphones (1) (2).zip', 'sample_data']\n"
          ]
        }
      ],
      "source": [
        "import os\n",
        "print(os.listdir())"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ct57jsGnCpyF"
      },
      "outputs": [],
      "source": [
        "zip_file_path = 'human_activity_recognition_using_smartphones_(1).zip'"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "I2ZSlo48CzEx",
        "outputId": "f3909e93-ae72-4d7f-e876-f70b1a424749"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "['.config', 'sample_data']\n"
          ]
        }
      ],
      "source": [
        "import os\n",
        "print(os.listdir())"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zXHiL-m5EN8y",
        "outputId": "d7d781dc-dc5b-4b0e-9c9d-f6bd4236abf1"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "['X_train.txt',\n",
              " 'y_train.txt',\n",
              " 'X_test.txt',\n",
              " 'y_test.txt',\n",
              " 'features.txt',\n",
              " 'activity_labels.txt']"
            ]
          },
          "execution_count": 48,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "['X_train.txt', 'y_train.txt', 'X_test.txt', 'y_test.txt', 'features.txt', 'activity_labels.txt']"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "OttGpCu9EdyZ"
      },
      "outputs": [],
      "source": [
        "import pandas as pd"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "K11dzRO3Ej9E"
      },
      "outputs": [],
      "source": [
        "from sklearn.cluster import KMeans"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "0BMahiDNF1pM"
      },
      "outputs": [],
      "source": [
        "from sklearn.decomposition import PCA"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "CdpaIK-GF8SD"
      },
      "outputs": [],
      "source": [
        "import matplotlib.pyplot as plt"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "PuP9A5ZTGFtF"
      },
      "outputs": [],
      "source": [
        "pca = PCA(n_components=2)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "voT7LDb0GPoV"
      },
      "outputs": [],
      "source": [
        "kmeans = KMeans(n_clusters=6, random_state=42)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "2pv5xFx3GWXv"
      },
      "outputs": [],
      "source": [
        "from sklearn.metrics import silhouette_score"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1rTfSbC_G7sr",
        "outputId": "fda63e5a-08d5-43cb-ace6-d622f3ffb06b"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "['.config',\n",
              " 'human+activity+recognition+using+smartphones (1).zip',\n",
              " 'human+activity+recognition+using+smartphones (1) (1).zip',\n",
              " 'human+activity+recognition+using+smartphones (1) (2).zip',\n",
              " 'sample_data']"
            ]
          },
          "execution_count": 64,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "os.listdir()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "mDeBAC-OIfp3"
      },
      "outputs": [],
      "source": [
        "import zipfile"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "MUPAZL_EJeZo"
      },
      "outputs": [],
      "source": [
        "import matplotlib.pyplot as plt"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "h5fkB5_SJ7jN"
      },
      "outputs": [],
      "source": [
        "import seaborn as sns"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 470
        },
        "id": "3G2Bla3nKFVI",
        "outputId": "07ed9728-cffb-4a1a-d506-df8ad8f429d3"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "Text(0.5, 1.0, 'Distribuição da primeira variável')"
            ]
          },
          "execution_count": 71,
          "metadata": {},
          "output_type": "execute_result"
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "plt.title(\"Distribuição da primeira variável\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "PdbAvSvaKVsL"
      },
      "outputs": [],
      "source": [
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "lGsjzZhzKjVK"
      },
      "outputs": [],
      "source": [
        "from sklearn.preprocessing import StandardScaler"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "RjCJZgc3KvcS"
      },
      "outputs": [],
      "source": [
        "scaler = StandardScaler()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "oho7f_FRK1d0"
      },
      "outputs": [],
      "source": [
        "from sklearn.decomposition import PCA"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "zRqUhInyLRnM"
      },
      "outputs": [],
      "source": [
        "pca = PCA(n_components=2)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "tLF-8xGOLX7d"
      },
      "outputs": [],
      "source": [
        "from sklearn.cluster import KMeans"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "SHy6v8g9LmE4"
      },
      "outputs": [],
      "source": [
        "import matplotlib.pyplot as plt"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 469
        },
        "id": "TrGBr2klLs6f",
        "outputId": "2c998a7e-83a2-4f5b-9979-bf6369660bf6"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "Text(0.5, 1.0, 'Método do Cotovelo')"
            ]
          },
          "execution_count": 85,
          "metadata": {},
          "output_type": "execute_result"
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "plt.title('Método do Cotovelo')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "BT_9jFqWMNSn",
        "outputId": "7ea0900f-fa68-400e-d8b8-43890fa03e4a"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "Text(0.5, 0, 'Número de Clusters')"
            ]
          },
          "execution_count": 86,
          "metadata": {},
          "output_type": "execute_result"
        },
        {
          "data": {
            "image/png": "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s1wAAHAN+L//+z8FBwc3yb68CpeWkp6e7nGV5syZM+rTp4+OHz/eZHccjVNZWSmHw6GysjKetmtlnItrB+fi2sL5uHZUVFSod+/e6tatW5Pt06twCQ0NlZ+fn8rLyz22l5eXKywsrN45YWFhXo2XJJvNJpvNVmd7cHAw/ye8RgQFBXEurhGci2sH5+Lawvm4dvj6Nt2nr3i1J39/f0VHR6uwsNC9zeVyqbCwUHFxcfXOiYuL8xgvSVu2bGlwPAAAQEO8fqooLS1NKSkpiomJ0fDhw5WTk6OqqipNmDBBkjRu3Dj16tVL2dnZkqTp06fr9ttv17Jly3TvvfcqLy9Pn376qV566aWmvScAAKDN8zpckpOTderUKWVkZMjpdCoqKkoFBQXuF+AeP37c45LQbbfdptdff11z587V008/rZtuukkbNmzQwIEDr/iYNptNmZmZ9T59hJbFubh2cC6uHZyLawvn49rRHOfC689xAQAAaC18VxEAADAG4QIAAIxBuAAAAGMQLgAAwBjXTLjk5uYqIiJCAQEBio2N1c6dOy87/s0339TNN9+sgIAADRo0SPn5+S200rbPm3OxatUqxcfHKyQkRCEhIUpISPjRc4cr5+2/i0vy8vLk4+OjUaNGNe8C2xFvz8WZM2eUmpqq8PBw2Ww29evXj/9ONRFvz0VOTo769++vwMBAORwOzZw5U99++20Lrbbt2rZtm5KSktSzZ0/5+Phc9jsIL9m6dauGDh0qm82mG2+8UatXr/b+wNY1IC8vz/L397deeeUV6/PPP7ceeeQRq2vXrlZ5eXm94z/++GPLz8/PWrJkibV//35r7ty5VseOHa19+/a18MrbHm/PxejRo63c3Fxrz549VklJiTV+/HgrODjY+sc//tHCK297vD0Xlxw9etTq1auXFR8fb91///0ts9g2zttzUV1dbcXExFj33HOPtX37duvo0aPW1q1breLi4hZeedvj7blYs2aNZbPZrDVr1lhHjx61Nm/ebIWHh1szZ85s4ZW3Pfn5+dacOXOst99+25JkrV+//rLjjxw5YnXq1MlKS0uz9u/fbz3//POWn5+fVVBQ4NVxr4lwGT58uJWamur+uba21urZs6eVnZ1d7/iHHnrIuvfeez22xcbGWo8++mizrrM98PZc/NDFixetLl26WK+99lpzLbHdaMy5uHjxonXbbbdZf/jDH6yUlBTCpYl4ey5efPFFq2/fvlZNTU1LLbHd8PZcpKamWnfeeafHtrS0NGvkyJHNus725krC5amnnrJuvfVWj23JyclWYmKiV8dq9aeKampqtGvXLiUkJLi3+fr6KiEhQUVFRfXOKSoq8hgvSYmJiQ2Ox5VpzLn4ofPnz+vChQtN+oVa7VFjz8WCBQvUo0cPTZw4sSWW2S405ly8++67iouLU2pqqux2uwYOHKisrCzV1ta21LLbpMaci9tuu027du1yP5105MgR5efn65577mmRNeM7TfXY3erfDn369GnV1ta6P3n3ErvdrgMHDtQ7x+l01jve6XQ22zrbg8acix+aNWuWevbsWef/nPBOY87F9u3b9fLLL6u4uLgFVth+NOZcHDlyRH/5y180ZswY5efn69ChQ/r1r3+tCxcuKDMzsyWW3SY15lyMHj1ap0+f1k9/+lNZlqWLFy9qypQpevrpp1tiyfiehh67Kysr9c033ygwMPCK9tPqV1zQdixevFh5eXlav369AgICWns57crZs2c1duxYrVq1SqGhoa29nHbP5XKpR48eeumllxQdHa3k5GTNmTNHK1eubO2ltTtbt25VVlaWXnjhBe3evVtvv/22Nm3apIULF7b20tBIrX7FJTQ0VH5+fiovL/fYXl5errCwsHrnhIWFeTUeV6Yx5+KSpUuXavHixfrggw80ePDg5lxmu+DtuTh8+LCOHTumpKQk9zaXyyVJ6tChg0pLS3XDDTc076LbqMb8uwgPD1fHjh3l5+fn3jZgwAA5nU7V1NTI39+/WdfcVjXmXMybN09jx47VpEmTJEmDBg1SVVWVJk+erDlz5nh8tx6aV0OP3UFBQVd8tUW6Bq64+Pv7Kzo6WoWFhe5tLpdLhYWFiouLq3dOXFycx3hJ2rJlS4PjcWUacy4kacmSJVq4cKEKCgoUExPTEktt87w9FzfffLP27dun4uJi9+2+++7THXfcoeLiYjkcjpZcfpvSmH8XI0eO1KFDh9zxKEkHDx5UeHg40XIVGnMuzp8/XydOLgWlxVf1tagme+z27nXDzSMvL8+y2WzW6tWrrf3791uTJ0+2unbtajmdTsuyLGvs2LHW7Nmz3eM//vhjq0OHDtbSpUutkpISKzMzk7dDNxFvz8XixYstf39/66233rJOnDjhvp09e7a17kKb4e25+CHeVdR0vD0Xx48ft7p06WI9/vjjVmlpqbVx40arR48e1m9+85vWugtthrfnIjMz0+rSpYv1xhtvWEeOHLHef/9964YbbrAeeuih1roLbcbZs2etPXv2WHv27LEkWcuXL7f27Nljffnll5ZlWdbs2bOtsWPHusdfejv0k08+aZWUlFi5ubnmvh3asizr+eeft3r37m35+/tbw4cPtz755BP3726//XYrJSXFY/y6deusfv36Wf7+/tatt95qbdq0qYVX3HZ5cy769OljSapzy8zMbPmFt0He/rv4PsKlaXl7Lnbs2GHFxsZaNpvN6tu3r7Vo0SLr4sWLLbzqtsmbc3HhwgXrmWeesW644QYrICDAcjgc1q9//Wvr66+/bvmFtzEffvhhvf/9v/T3T0lJsW6//fY6c6Kioix/f3+rb9++1quvvur1cX0si2tlAADADK3+GhcAAIArRbgAAABjEC4AAMAYhAsAADAG4QIAAIxBuAAAAGMQLoBB1q9fr3Xr1rX2MgCg1RAugCF27typGTNmaMSIEa29lKu2detW+fj46MyZM81+rJ///OeaMWNGsx8HQMsgXIBWMH78ePn4+Gjx4sUe2zds2CAfH5864ysqKjRp0iStX79evXv3bqllXvNqamq0ZMkSRUZGqlOnTgoNDdXIkSP16quv6sKFC81yTB8fH23YsKFZ9g3gx7X6t0MD7VVAQICeffZZPfroowoJCbns2ODgYP39739voZXV71r7VuOamholJiZq7969WrhwoUaOHKmgoCB98sknWrp0qYYMGaKoqKjWXmaDLly4oI4dO7b2MgDjcMUFaCUJCQkKCwtTdnZ2g2OeeeaZOg++OTk5ioiIcP88fvx4jRo1SllZWbLb7eratasWLFigixcv6sknn1S3bt30k5/8RK+++qrHfsrKyvTQQw+pa9eu6tatm+6//34dO3aszn4XLVqknj17qn///pKkffv26c4771RgYKCuv/56TZ48WefOnbvsfc3Pz1e/fv0UGBioO+64w+M4l2zfvl3x8fEKDAyUw+HQtGnTVFVV1eA+c3JytG3bNhUWFio1NVVRUVHq27evRo8erb/+9a+66aab6p1X3xWTrl27avXq1ZL+FUSPP/64wsPDFRAQoD59+rjP0aW/+y9/+Uv5+Ph4nId33nlHQ4cOVUBAgPr27av58+fr4sWLHsd98cUXdd999+m6667TokWL9PXXX2vMmDHq3r27AgMDddNNN9U5TwA8ES5AK/Hz81NWVpaef/55/eMf/7iqff3lL3/R//7v/2rbtm1avny5MjMz9Z//+Z8KCQnRX//6V02ZMkWPPvqo+zgXLlxQYmKiunTpoo8++kgff/yxOnfurLvvvls1NTXu/RYWFqq0tFRbtmzRxo0bVVVVpcTERIWEhOhvf/ub3nzzTX3wwQd6/PHHG1xbWVmZHnjgASUlJam4uFiTJk3S7NmzPcYcPnxYd999t/7rv/5Lf//737V27Vpt3779svtds2aNEhISNGTIkDq/69ixo6677jpv/4ySpOeee07vvvuu1q1bp9LSUq1Zs8YdKH/7298kSa+++qpOnDjh/vmjjz7SuHHjNH36dO3fv1+///3vtXr1ai1atMhj388884x++ctfat++ffrVr36lefPmaf/+/XrvvfdUUlKiF198UaGhoY1aN9BuXO23QwLw3ve/uXnEiBHWr371K8uyLGv9+vXW9/9ZZmZmWpGRkR5zf/e731l9+vTx2FefPn2s2tpa97b+/ftb8fHx7p8vXrxoXXfdddYbb7xhWZZl/elPf7L69+9vuVwu95jq6morMDDQ2rx5s3u/drvdqq6udo956aWXrJCQEOvcuXPubZs2bbJ8fX0tp9NZ731NT0+3brnlFo9ts2bNsiS5v6F34sSJ1uTJkz3GfPTRR5avr6/1zTff1LvfwMBAa9q0afX+7vtuv/12a/r06e6fJVnr16/3GBMcHOz+ltqpU6dad955p8ff5vvqm3/XXXdZWVlZHtv+9Kc/WeHh4R7zZsyY4TEmKSnJmjBhwo/eBwDf4YoL0MqeffZZvfbaayopKWn0Pm699Vb5+n73z9lut2vQoEHun/38/HT99dfr5MmTkqS9e/fq0KFD6tKlizp37qzOnTurW7du+vbbb3X48GH3vEGDBnm8rqWkpESRkZEeVzNGjhwpl8ul0tLSetdWUlKi2NhYj21xcXEeP+/du1erV692r6Vz585KTEyUy+XS0aNH692v1UxfbD9+/HgVFxerf//+mjZtmt5///0fnbN3714tWLDAY/2PPPKITpw4ofPnz7vHxcTEeMx77LHHlJeXp6ioKD311FPasWNHk98foK3hxblAK/vZz36mxMREpaena/z48R6/8/X1rfMAXd+7ZX74Ik8fH596t7lcLknSuXPnFB0drTVr1tTZV/fu3d3/u7FPt3jr3LlzevTRRzVt2rQ6v2voXVT9+vXTgQMHvD6Wj4/PZf+mQ4cO1dGjR/Xee+/pgw8+0EMPPaSEhAS99dZbl13//Pnz9cADD9T5XUBAgPt///Dv+R//8R/68ssvlZ+fry1btuiuu+5Samqqli5d6vX9AtoLwgW4BixevFhRUVHuF8Be0r17dzmdTlmW5X6bdHFx8VUfb+jQoVq7dq169OihoKCgK543YMAArV69WlVVVe4H4Y8//li+vr511v79Oe+++67Htk8++aTOevbv368bb7zxitcyevRoPf3009qzZ0+d17lcuHBBNTU19YZX9+7ddeLECffPX3zxhcdVEUkKCgpScnKykpOT9eCDD+ruu+/WV199pW7duqljx46qra2ts/7S0lKv1v/99aSkpCglJUXx8fF68sknCRfgMniqCLgGDBo0SGPGjNFzzz3nsf3nP/+5Tp06pSVLlujw4cPKzc3Ve++9d9XHGzNmjEJDQ3X//ffro48+0tGjR7V161ZNmzbtsi8UHjNmjAICApSSkqLPPvtMH374oaZOnaqxY8fKbrfXO2fKlCn64osv9OSTT6q0tFSvv/66+x08l8yaNUs7duzQ448/ruLiYn3xxRd65513Lvvi3BkzZmjkyJG66667lJubq7179+rIkSNat26dRowYoS+++KLeeXfeeadWrFihPXv26NNPP9WUKVM8rk4tX75cb7zxhg4cOKCDBw/qzTffVFhYmLp27SrpX+8sKiwslNPp1Ndffy1JysjI0B//+EfNnz9fn3/+uUpKSpSXl6e5c+c2uP5L89555x0dOnRIn3/+uTZu3KgBAwZcdg7Q3hEuwDViwYIF7qdyLhkwYIBeeOEF5ebmKjIyUjt37tQTTzxx1cfq1KmTtm3bpt69e+uBBx7QgAEDNHHiRH377beXvQLTqVMnbd68WV999ZWGDRumBx98UHfddZdWrFjR4JzevXvrz3/+szZs2KDIyEitXLlSWVlZHmMGDx6s//mf/9HBgwcVHx+vIUOGKCMjQz179mxwvzabTVu2bNFTTz2l3//+9xoxYoSGDRum5557TtOmTdPAgQPrnbds2TI5HA7Fx8dr9OjReuKJJ9SpUyf377t06aIlS5YoJiZGw4YN07Fjx5Sfn+9+DdGyZcu0ZcsWORwO95WexMREbdy4Ue+//76GDRumESNG6He/+5369OnT4Polyd/fX+np6Ro8eLB+9rOfyc/PT3l5eZedA7R3PlZzvcINAACgiXHFBQAAGINwAQAAxiBcAACAMQgXAABgDMIFAAAYg3ABAADGIFwAAIAxCBcAAGAMwgUAABiDcAEAAMYgXAAAgDEIFwAAYIz/B5MKy2mxO0OvAAAAAElFTkSuQmCC\n",
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "plt.xlabel('Número de Clusters')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 452
        },
        "id": "53c2jqqyMWl5",
        "outputId": "b1e42a5b-0502-4e0a-9634-65bfa02a66b4"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "Text(0, 0.5, 'Inércia')"
            ]
          },
          "execution_count": 87,
          "metadata": {},
          "output_type": "execute_result"
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "plt.ylabel('Inércia')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "H995JDNyMeB8"
      },
      "outputs": [],
      "source": [
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "sc0qfxKAMktQ"
      },
      "outputs": [],
      "source": [
        "from sklearn.metrics import silhouette_score"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 211
        },
        "id": "QIKBs-ttMq9t",
        "outputId": "b92e15b1-a088-4f96-f345-7c1ea1d8d323"
      },
      "outputs": [
        {
          "ename": "NameError",
          "evalue": "name 'X_train_pca' is not defined",
          "output_type": "error",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-91-a82a6fc0b8e1>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mk\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m11\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m     \u001b[0mkmeans\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mKMeans\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mn_clusters\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mk\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrandom_state\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m42\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m     \u001b[0mkmeans\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_train_pca\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m     \u001b[0mscore\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msilhouette_score\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_train_pca\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkmeans\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlabels_\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m     \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"Silhouette Score para K={k}: {score}\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'X_train_pca' is not defined"
          ]
        }
      ],
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 110
        },
        "id": "loO58g5a85fw",
        "outputId": "70f48e4e-2379-4beb-8dee-fc0f0d853662"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-20a436bd-baf2-4e7d-8faa-e4acc34b6d3e\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-20a436bd-baf2-4e7d-8faa-e4acc34b6d3e\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Saving human+activity+recognition+using+smartphones (1).zip to human+activity+recognition+using+smartphones (1) (2).zip\n"
          ]
        }
      ],
      "source": [
        "from google.colab import files\n",
        "uploaded = files.upload()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "o_B0cw1eRYi-"
      },
      "outputs": [],
      "source": [
        "import zipfile"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YKmxitFduBlv",
        "outputId": "29a7efb8-0b00-4cbe-8817-2af424d37c51"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Requirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (1.26.4)\n",
            "Requirement already satisfied: pandas in /usr/local/lib/python3.10/dist-packages (2.2.2)\n",
            "Requirement already satisfied: scikit-learn in /usr/local/lib/python3.10/dist-packages (1.5.2)\n",
            "Requirement already satisfied: matplotlib in /usr/local/lib/python3.10/dist-packages (3.8.0)\n",
            "Requirement already satisfied: seaborn in /usr/local/lib/python3.10/dist-packages (0.13.2)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.10/dist-packages (from pandas) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas) (2024.2)\n",
            "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.10/dist-packages (from pandas) (2024.2)\n",
            "Requirement already satisfied: scipy>=1.6.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (1.13.1)\n",
            "Requirement already satisfied: joblib>=1.2.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (1.4.2)\n",
            "Requirement already satisfied: threadpoolctl>=3.1.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (3.5.0)\n",
            "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (1.3.1)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (0.12.1)\n",
            "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (4.55.0)\n",
            "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (1.4.7)\n",
            "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (24.2)\n",
            "Requirement already satisfied: pillow>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (11.0.0)\n",
            "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (3.2.0)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.8.2->pandas) (1.16.0)\n"
          ]
        }
      ],
      "source": [
        "!pip install numpy pandas scikit-learn matplotlib seaborn"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOozY90cYhSCo7T/Lv0wjbZ",
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
